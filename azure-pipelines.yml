# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    npm run build
    npm install -g tslint typescript
  displayName: 'npm install and build'

- script: |
    npm pack
  displayName: 'Package for npm release'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '*.tgz' 
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy npm package'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: 'package.json' 
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy package.json'

- script: |
    PackageName=$(npm list --json --depth=0 | sed -n 2p | cut -d '"' -f4)
    NewPackageVersion=$(npm list --json --depth=0 | sed -n 3p | cut -d '"' -f4)
    PublishedPackageVersion=$(npm show $PackageName version)
    echo "##vso[task.setvariable variable=NewPackageVersion;]$NewPackageVersion"
    echo "##vso[task.setvariable variable=PublishedPackageVersion;]$PublishedPackageVersion"
  displayName: "Extract package versions"

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/npm'
    artifactName: npm
  displayName: 'Publish npm artifact'
  
# trigger:
# - none

# pool:
#   vmImage: 'ubuntu-latest'

# steps:
# - task: NodeTool@0
#   inputs:
#     versionSpec: '10.x'
#   displayName: 'Install Node.js'

# - script: |
#     npm install
#     npm init react-app my-app
#     npm run build
#   displayName: 'npm install and build'

# - task: CopyFiles@2
#   inputs:
#     Contents: '**' ## update to match what you want to copy
#     TargetFolder: '$(Build.ArtifactStagingDirectory)'

# - script: echo $(Build.StagingDirectory)
# - powershell: dir
# - powershell: Get-ChildItem -Path public -Recurse -Force

# - task: PublishBuildArtifacts@1
#   inputs: 
#     pathtoPublish: $(Build.ArtifactStagingDirectory) # dist or build files

# - task: CopyFiles@2
#   inputs:
#     Contents: '**' ## update to match what you want to copy
#     TargetFolder: '$(Build.ArtifactStagingDirectory)'

# - task: PublishBuildArtifacts@1
#   inputs: 
#     pathtoPublish: $(Build.ArtifactStagingDirectory) # dist or build files
